import requests
from bs4 import BeautifulSoup
import re
import urllib3
from urllib.parse import urlparse, urljoin
import os
import sys
import time
import random
import string
import socket
import threading
import queue
import hashlib
import base64
import numpy as np
from PIL import Image

# Suppress warnings from urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class WebVulnScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.queue = queue.Queue()
        self.results = []
        
    def check_sql_injection(self):
        payloads = ["' OR '1'='1", "' OR '1'='1' --", '" OR "1"="1', '" OR 1=1 --']
        vulnerable = False
        
        def execution():
            while not self.queue.empty():
                payload =self.queue.get()
                url = f"{self.target_url}?search={payload}"
                try:
                    response = requests.get(url, verify=False)
                    if "SQL syntax" in response.text or "error" in response.text.lower():
                            self.results.append(f"SQL Injection vulnerability detected with payload: {payload}")
                            print(f"SQL Injection vulnerability detected with payload: {payload}")
                            vulnerable = True
                except requests.RequestException as e:
                        print(f"Request failed: {e}")
                finally:
                        self.queue.task_done()
        # populate the queue with payloads
        for payload in payloads:
            self.queue.put(payload)
            
        # creating and starting an execution threads 
        threads = [threading.Thread(target=execution) for _ in range(4)]
        for thread in threads:
            thread.start()
        self.queue.join()
        
        if not vulnerable:
            print("No SQL Injection vulnerability detected")
    
    def checking_xss(self):
        